*** src/output-plugins/spo_unified.c	2005-07-11 10:41:40.000000000 -0400
--- spo_unified.c	2006-08-30 16:53:33.000000000 -0400
***************
*** 150,159 ****
--- 150,160 ----
  {
      char *filename;
      FILE *stream;
      unsigned int limit;
      unsigned int current;
+     int appendepoch;
  } UnifiedConfig;
  
  typedef struct _FileHeader
  {
      u_int32_t magic;
***************
*** 290,306 ****
      curr_time = time(NULL);
  
      if(data == NULL)
          FatalError("SpoUnified: Unable to get context data\n");
  
!     if(*(data->filename) == '/')
!         value = snprintf(logdir, STD_BUF, "%s.%lu", data->filename, 
!                 (unsigned long)curr_time);
!     else
!         value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir,  
!                 data->filename, (unsigned long)curr_time);
! 
      if(value == -1)
          FatalError("SpoUnified: filepath too long\n");
  
      //printf("Opening %s\n", logdir);
  
--- 291,316 ----
      curr_time = time(NULL);
  
      if(data == NULL)
          FatalError("SpoUnified: Unable to get context data\n");
  
!     if(data->appendepoch==1){
!         LogMessage("with appendepoch\n");
!         if(*(data->filename) == '/')
!             value = snprintf(logdir, STD_BUF, "%s.%lu", data->filename, 
!                     (unsigned long)curr_time);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir,  
!                     data->filename, (unsigned long)curr_time);
!         }
!     else{
!         LogMessage("no append epoch!\n");
!         if(*(data->filename) == '/')
!             value = snprintf(logdir, STD_BUF, "%s", data->filename);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s", pv.log_dir,data->filename);
!         }
      if(value == -1)
          FatalError("SpoUnified: filepath too long\n");
  
      //printf("Opening %s\n", logdir);
  
***************
*** 459,474 ****
      }
      
      /* backward compatibility stuff */
      if(dHdr == NULL)
      {
!         if((data->current + sizeof(UnifiedAlert)) > data->limit)
              UnifiedAlertRotateFile(data);
      }
      else
      {
!         if((data->current + sizeof(UnifiedAlert)) > data->limit)
              UnifiedRotateFile(data);
      }
  
      if(dHdr)
      {
--- 469,484 ----
      }
      
      /* backward compatibility stuff */
      if(dHdr == NULL)
      {
!         if(((data->current + sizeof(UnifiedAlert)) > data->limit) && (data->limit !=-1)) 
              UnifiedAlertRotateFile(data);
      }
      else
      {
!         if(((data->current + sizeof(UnifiedAlert)) > data->limit) &&(data->limit !=-1))
              UnifiedRotateFile(data);
      }
  
      if(dHdr)
      {
***************
*** 557,574 ****
      }
      
      /* backward compatibility stuff */
      if(dHdr == NULL)
      {
!         if((data->current + sizeof(UnifiedLog) + logheader.pkth.caplen) > 
!                 data->limit)
              UnifiedLogRotateFile(data);
      }
      else
      {   
!         if((data->current + sizeof(UnifiedLog) + sizeof(DataHeader) 
!                     + logheader.pkth.caplen) > data->limit)
              UnifiedRotateFile(data);
      }
      if(dHdr)
      {
          if(fwrite((char *)dHdr, sizeof(DataHeader), 1, data->stream) != 1)
--- 567,584 ----
      }
      
      /* backward compatibility stuff */
      if(dHdr == NULL)
      {
!         if(((data->current + sizeof(UnifiedLog) + logheader.pkth.caplen) > 
!                 data->limit) && (data->appendepoch==1) )
              UnifiedLogRotateFile(data);
      }
      else
      {   
!         if(((data->current + sizeof(UnifiedLog) + sizeof(DataHeader) 
!                     + logheader.pkth.caplen) > data->limit) && (data->appendepoch==1))
              UnifiedRotateFile(data);
      }
      if(dHdr)
      {
          if(fwrite((char *)dHdr, sizeof(DataHeader), 1, data->stream) != 1)
***************
*** 656,677 ****
                  memcpy(&logheader.pkth, &spd->pkth, sizeof(SnortPktHeader));
  
                  /* backward compatibility stuff */
                  if(dHdr == NULL)
                  {
!                     if((data->current +
                          sizeof(UnifiedLog)+
                          logheader.pkth.caplen) > 
!                         data->limit)
                      {
                          UnifiedLogRotateFile(data);
                      }
                  }
                  else
                  {   
!                     if((data->current + sizeof(UnifiedLog) + sizeof(DataHeader) 
!                                 + logheader.pkth.caplen) > data->limit)
                          UnifiedRotateFile(data);
                  }
  
                  if(dHdr)
                  {
--- 666,687 ----
                  memcpy(&logheader.pkth, &spd->pkth, sizeof(SnortPktHeader));
  
                  /* backward compatibility stuff */
                  if(dHdr == NULL)
                  {
!                     if(((data->current +
                          sizeof(UnifiedLog)+
                          logheader.pkth.caplen) > 
!                         data->limit) && (data->appendepoch==1) )
                      {
                          UnifiedLogRotateFile(data);
                      }
                  }
                  else
                  {   
!                     if(((data->current + sizeof(UnifiedLog) + sizeof(DataHeader) 
!                                 + logheader.pkth.caplen) > data->limit) &&(data->appendepoch==1))
                          UnifiedRotateFile(data);
                  }
  
                  if(dHdr)
                  {
***************
*** 734,743 ****
--- 744,754 ----
   */
  UnifiedConfig *UnifiedParseArgs(char *args, char *default_filename)
  {
      UnifiedConfig *tmp;
      int limit = 0;
+     int appendepoch=1;
  
      tmp = (UnifiedConfig *)calloc(sizeof(UnifiedConfig), sizeof(char));
  
      if(tmp == NULL)
      {
***************
*** 780,789 ****
--- 791,819 ----
                  {
                      LogMessage("Argument Error in %s(%i): %s\n",
                              file_name, file_line, index);
                  }
              }
+ 
+             if(strcasecmp("appendepoch", stoks[0]) == 0)
+             {
+                 if(num_stoks > 1 && appendepoch == 1)
+                 {
+                     appendepoch = atoi(stoks[1]);
+                     if (appendepoch!=0 && appendepoch!=1){
+                       appendepoch=0;
+                     }
+                     LogMessage("appendepochvalue=%d \n",appendepoch); 
+                 }
+                 else
+                 {
+                     LogMessage("Argument Error in %s(%i): %s\n",
+                             file_name, file_line, index);
+                 }
+             }
+ 
+ 
              do
                  free(stoks[--num_stoks]);
              while(num_stoks);
          }
          do
***************
*** 805,817 ****
          LogMessage("spo_unified %s(%d)=> Lowering limit of %iMB to 512MB\n", file_name, file_line, limit);
          limit = 512;
      }
  
      /* convert the limit to "MB" */
!     tmp->limit = limit << 20;
  
      return tmp;
  }
  
  
  /*
   * Function: UnifiedCleanExitFunc()
--- 835,857 ----
          LogMessage("spo_unified %s(%d)=> Lowering limit of %iMB to 512MB\n", file_name, file_line, limit);
          limit = 512;
      }
  
      /* convert the limit to "MB" */
!     if(appendepoch==1){
!       tmp->limit = limit << 20;
!     }
!     else{
!       LogMessage("spo_unified file with no limit size!\n");
!       tmp->limit=-1;
!     }
!     /*put appendepoch*/
!     tmp->appendepoch=appendepoch;
!     
  
      return tmp;
+ 
  }
  
  
  /*
   * Function: UnifiedCleanExitFunc()
***************
*** 900,915 ****
      UnifiedAlertFileHeader hdr;
  
      bzero(logdir, STD_BUF);
      curr_time = time(NULL);
  
!     if(data->filename[0] == '/')
!         value = snprintf(logdir, STD_BUF, "%s.%lu",  data->filename, 
!                 (unsigned long)curr_time);
!     else
!         value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir, 
!                 data->filename, (unsigned long)curr_time);
  
      if(value == -1)
      {
          FatalError("unified log file logging path and file name are "
                     "too long, aborting!\n");
--- 940,965 ----
      UnifiedAlertFileHeader hdr;
  
      bzero(logdir, STD_BUF);
      curr_time = time(NULL);
  
!     if (data->appendepoch==1){
!         if(data->filename[0] == '/')
!             value = snprintf(logdir, STD_BUF, "%s.%lu",  data->filename, 
!                     (unsigned long)curr_time);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir, 
!                     data->filename, (unsigned long)curr_time);
!        }
!    else{
!         if(data->filename[0] == '/')
!             value = snprintf(logdir, STD_BUF, "%s",  data->filename);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s", pv.log_dir,
!                     data->filename);
!    }
! 
  
      if(value == -1)
      {
          FatalError("unified log file logging path and file name are "
                     "too long, aborting!\n");
***************
*** 1000,1016 ****
      if(data == NULL)
      {
          FatalError("Can't get unified plugin context, that's bad\n");
      }
  
!     if(*(data->filename) == '/')
!         value = snprintf(logdir, STD_BUF, "%s.%lu", data->filename, 
!                 (unsigned long)curr_time);
!     else
!         value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir,  
!                 data->filename, (unsigned long)curr_time);
! 
      if(value == -1)
      {
          FatalError("unified log file logging path and file name are "
                     "too long, aborting!\n");
      }
--- 1050,1074 ----
      if(data == NULL)
      {
          FatalError("Can't get unified plugin context, that's bad\n");
      }
  
!     if (data->appendepoch==1){
!         if(*(data->filename) == '/')
!             value = snprintf(logdir, STD_BUF, "%s.%lu", data->filename, 
!                     (unsigned long)curr_time);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s.%lu", pv.log_dir,  
!                     data->filename, (unsigned long)curr_time);
!         }
!     else{
!         if(*(data->filename) == '/')
!             value = snprintf(logdir, STD_BUF, "%s", data->filename);
!         else
!             value = snprintf(logdir, STD_BUF, "%s/%s", pv.log_dir,
!                     data->filename);
!     }
      if(value == -1)
      {
          FatalError("unified log file logging path and file name are "
                     "too long, aborting!\n");
      }
***************
*** 1224,1235 ****
              logheader.pkth.ts.tv_usec = 0;
              logheader.pkth.caplen = 0;
              logheader.pkth.pktlen = 0;
          }
  
!         if((data->current + sizeof(UnifiedLog) + logheader.pkth.caplen) > 
!                 data->limit)
              UnifiedLogRotateFile(data);
  
          fwrite((char*)&logheader, sizeof(UnifiedLog), 1, data->stream);
  
          if(p)
--- 1282,1293 ----
              logheader.pkth.ts.tv_usec = 0;
              logheader.pkth.caplen = 0;
              logheader.pkth.pktlen = 0;
          }
  
!         if(((data->current + sizeof(UnifiedLog) + logheader.pkth.caplen) > 
!                 data->limit) &&(data->appendepoch==1))
              UnifiedLogRotateFile(data);
  
          fwrite((char*)&logheader, sizeof(UnifiedLog), 1, data->stream);
  
          if(p)
